// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  email        String    @unique
  mobileNumber      String   @unique
  createdAt    DateTime  @default(now()) @map("createdAt")
  password     String?
  provider     Provider
  imgUri       String?
  sentMessages Message[] @relation("Sender") // Added opposite relation field
  chatIds String[]   @db.ObjectId
  purchases Purchase[]
  chats  Chat[] @relation(fields: [chatIds], references: [id])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
   userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
  createdAt DateTime  @default(now()) @map("createdAt")
  messages  Message[]
}

model Message {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  status  messageStatus @default(sending)
  content String

  senderId  String   @db.ObjectId
  timeStamp DateTime @default(now()) @map("createdAt")
  sender    User     @relation(name: "Sender", fields: [senderId], references: [id])
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?  @db.ObjectId
}
enum Provider {
  LOCAL
  GOOGLE
}

enum messageStatus {
  sent
  notsent
  sending
}



model Product {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  stock        Int   
  createdAt    DateTime  @default(now()) @map("createdAt")
  description     String?
  price     Int
  imgUri       String?
  category  String
    purchases   Purchase[]
}


model Purchase {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("createdAt")
  price     Int
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  productId String
  title  String?
  description String?
  image String?
}

model Payments {
id String  @id @default(auto()) @map("_id") @db.ObjectId
 createdAt DateTime @default(now()) @map("createdAt")
checkout_id String @unique
user_id String @unique
items  Json[]
status PaymentStatus
}

enum PaymentStatus {
  PENDING
  SUCCESS
}